//---------------------first-------------------------------------
import Foundation
import Glibc

// you can write to stdout for debugging purposes, e.g.
// print("this is a debug message")

public func solution(_ N : Int, _ A : inout [Int]) -> [Int] {
    // write your code in Swift 3.0 (Linux)
    var Max = 0
    var rs:[Int] = Array(repeating:0,count:N)
    
    // print(rs)
    
    for i in 0..<A.count{
        if A[i] <= N {
            rs[A[i] - 1] += 1
            Max = rs[A[i] - 1] < Max ? Max : rs[A[i] - 1]
        }else{
            rs = Array(repeating:Max,count:N) //---->O(N)
        }
    }
    
    // print(rs)
    
    return rs
}

//-------------------time out  O(N*M)-----------------------------

//-------------------second--------------------------------


import Foundation
import Glibc

// you can write to stdout for debugging purposes, e.g.
// print("this is a debug message")

public func solution(_ N : Int, _ A : inout [Int]) -> [Int] {
    // write your code in Swift 3.0 (Linux)
    var Max = 0
    var MaxCount = 0
    var rs:[Int] = Array(repeating:0,count:N)
    
    // print(rs)
    
    for i in 0..<A.count{
        if A[i] <= N {
            if rs[A[i] - 1] < MaxCount{
                rs[A[i] - 1] = MaxCount
            }
        rs[A[i] - 1] += 1
        Max = rs[A[i] - 1] < Max ? Max : rs[A[i] - 1]
        }else{
            MaxCount = Max
        }
    }
    // print(rs)
    // print(MaxCount)
    for i in 0..<N{
        if rs[i] < MaxCount{
            rs[i] = MaxCount
        }
    }
    
    // print(rs)
    
    return rs
}

//-------------------time out  O(N+M)-----------------------------